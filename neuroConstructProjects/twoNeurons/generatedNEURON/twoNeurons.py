#  ******************************************************
# 
#     File generated by: neuroConstruct v1.7.0
# 
#  ******************************************************

#  Including some standard Python modules 

import sys
import os

import xml.sax
import time

import logging

#  Adding working dir to Python path

if sys.path.count(os.getcwd())==0: sys.path.append(os.getcwd())

#  Including NEURON specifics

import neuron
from neuron import hoc
import nrn

sys.path.append("NeuroMLUtils")
sys.path.append("NEURONUtils")

import NetworkMLSaxHandler
import NEURONSimUtils

#  ******************************************************
# 
#  This is the main function which will be called by the hoc file.
#  Subject to change...
# 
#  ******************************************************

def loadNetwork():
    h = hoc.HocObject()
    
    logformat = "%(name)-19s %(levelname)-5s -"+str(int(h.hostid))+"- %(message)s"
    logging.basicConfig(level=logging.INFO, format=logformat)
    log = logging.getLogger("twoNeurons")
    
    #  Adding cell template file: SimpleCell_t.hoc for cell group SimpleCellGroup
    
    h.load_file("SimpleCell_t.hoc")
    
    #  Adding cell template file: PurkinjeCell_t.hoc for cell group PurkinjeCellGroup
    
    h.load_file("PurkinjeCell_t.hoc")
    
    {load_file("SimpleCellMembrane.hoc")}
    log.log(logging.INFO, "Loading cell positions and connections from: Generated.net.xml")
    
    file_name = 'Generated.net.xml'
    
    beforeLoad = time.time()
    nmlHandler = NEURONSimUtils.NetManagerNEURON()
    parser = xml.sax.make_parser()
    curHandler = NetworkMLSaxHandler.NetworkMLSaxHandler(nmlHandler)
    curHandler.setNodeId(-1) 
    parser.setContentHandler(curHandler)
    parser.parse(open(file_name)) 
    afterLoad = time.time()
    log.log(logging.INFO, "Loaded file in "+ str(afterLoad-beforeLoad)+ " seconds on host: %d" % (int(h.hostid)))
    
    

